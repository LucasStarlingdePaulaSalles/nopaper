var Notebook=require("../models/notebookModel");const dayjs=require("dayjs");var Note=require("../models/noteModel");exports.find=function(o,e){Notebook.find({userId:o.body.userId},["_id","name","description","createdAt"]).sort({updatedAt:-1}).exec(function(o,t){if(o)return e.status(501).send("Notebook não foi encontrado");let d=t.map(o=>{return{...o.toJSON(),createdAt:dayjs(o.createdAt).format("DD/MM/YYYY")}});return e.send(d)})},exports.new=function(o,e){new Notebook({name:o.body.name,description:o.body.description,userId:o.body.userId}).save(function(o){if(o)return e.status(501).send("Notebook não foi criado");e.send("Notebook criado com sucesso")})},exports.delete=((o,e)=>{Notebook.findById(o.body.id,(t,d)=>t?e.status(400).send("Id invalido."):d.userId.toString()!==o.body.userId?e.status(403).send("Proibido. Notebook não te pertence."):(d.deleteOne(o=>{if(o)return e.status(500).send("Não foi possivel deletar o notebook. Tente novamente mais tarde.")}),e.send("Notebook deletado com sucesso.")))}),exports.clone=(async(o,e)=>{try{const t=await Notebook.findById(o.body.id),d=new Notebook({name:t.name,description:t.description,userId:o.body.userId}),n=(await d.save())._id,s=await Note.find({notebookId:t._id});if(s)for(const o of s){const e=new Note({title:o.title,markdown:o.markdown,notebookId:n});await e.save()}return e.send("Notebook clonado com sucesso!")}catch(o){return e.status(500).send("Não foi possivel clonar o caderno")}});