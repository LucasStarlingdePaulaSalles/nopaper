var Notebook=require("../models/notebookModel"),Note=require("../models/noteModel");exports.getNotesById=(async(o,t)=>{try{await Notebook.find({_id:o.body.id,userId:o.body.userId});const e=await Note.find({notebookId:o.body.id},["_id","title","markdown","notebookId","createdAt"]).sort({updatedAt:-1});return t.send(e)}catch(o){return t.status(400).send("Notebook id inválido.")}}),exports.setNewNote=(async(o,t)=>{if(!o.body.title||!o.body.markdown||!o.body.notebookId)return t.status(400).send("Requisição invalida.");try{await Notebook.find({_id:o.body.id,userId:o.body.userId}),new Note({title:o.body.title,markdown:o.body.markdown,notebookId:o.body.notebookId}).save(o=>o?t.status(501).send("Não foi possivel criar nota."):t.send("Nota criada com sucesso!"))}catch(o){return t.status(400).send("Notebook id inválido.")}}),exports.updateNote=(async(o,t)=>{try{await Notebook.find({_id:o.body.notebookId,userId:o.body.userId});try{return await Note.findByIdAndUpdate(o.body.noteId,{title:o.body.title,markdown:o.body.markdown}),t.send("Nota atualizada com sucesso!")}catch(o){return t.status(400).send("Note id inválido.")}}catch(o){return t.status(400).send("Notebook id inválido.")}}),exports.deleteNote=(async(o,t)=>{try{await Notebook.find({_id:o.body.notebookId,userId:o.body.userId});try{await Note.findByIdAndDelete(o.body.noteId),t.send("Nota deletada com sucesso!")}catch(o){return t.status(400).send("Note id inválido.")}}catch(o){return t.status(400).send("Notebook id inválido.")}}),exports.cloneNote=((o,t)=>{Note.findById(o.body.noteId,(e,d)=>{if(e)return t.status(400).send("Note id inválido.");new Note({title:d.title+"Copy",markdown:d.markdown,notebookId:o.body.notebookId}).save(o=>o?t.status(501).send("Não foi copiar criar nota."):t.send("Nota clonada com sucesso!"))})});